# -*- coding: utf-8 -*-
"""NOVA_PROG_OTICA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15YyXjusPyq5pC1kj_8HxKaaMDywtm8c2

# Problemas
*    os dados com aoi de 5° estão equivocados/não fazem sentido... deletar da base(?)

# **INTRODUÇÃO**
Simulação numérica de ótica de janelas com n camadas utilizando água, ar e água.

Os dados são armazenados em 3 bancos (arquivos json):

PROT_profile:

PROT_theta,

PROT_results.

## PROT_profile.json
TIPO: dicionário JSON **{key:[info, nx, k, d]}** onde:

CHAVES
*   **key** = 'g3', 'g3w10g3' ... nome do perfil com as iniciais de cada layer da janela e sua espessura,

VALORES EM LISTA:
*   **info** = string com descrição do protótipo,
*    **nxx** = matriz do índice de refração de cada camada (as linhas representam os valores para os comprimentos de onda de 300nm a 2500nm,
*    **d** = lista com len(d) sendo o total de layers analisados e cada valor de len tem a espessura da camada.


**Função que gera o PROT_profile.json**:

`gen_prot_profile_1st_step(dictionary_of_glazings)`

*     É necesário passar um dicionário que diz exatamente o que é cada camada:
```
    'g3':{
        'info': 'single 3mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}
```

## PROT_theta.json
TIPO: dicionário JSON **{name:[t, rf, rb]}** onde:

CHAVE:
*    **name** = key do PROT_profile + ângulo de incidência **(p.ex. g3_0, g3_30 ...)**

VALORES EM LISTA:

*    **t** = matriz de transmissividade ('tezinho') onde colunas são layers e linhas são comprimento de onda (varia de 0 a 1),
*    **rf** = matriz de refletividade frontal ('rho frontal') onde colunas são layers e linhas são comprimento de onda (varia de 0 a 1),
*    **rb** = matriz de refletividade frontal ('rho traseiro') onde colunas são layers e linhas são comprimento de onda (varia de 0 a 1).

**Função que gera o PROT_profile.json**:

`gen_prot_theta_2nd_step(list_profile_and_angle)`

É necessário passar uma lista com a key de PROT_profile e o ângulo adotado.

Necessita-se também carregar PROT_profile para os cálculos.

## PROT_results.json
TIPO: dicionário JSON:
```
{name:{'Ttotal':Ttotal, 'Rtotal':Rtotal, 'Ttotalvis':Ttotalvis, 'Rtotalvis':Rtotalvis, 'Tsol':Tsol, 'Rsol':Rsol, 'Tvis':Tvis, 'Rvis':Rvis, 'A':A, 'Tabelacont':Tabelacont} 
```
CHAVE:
*    **name** = key do PROT_profile + ângulo de incidência, que já tem no PROT_theta + expoente do limiar de cálculo (-10, -8...) **(p.ex. g3_0_-10, g3_30_-10)**

VALORES EM CHAVE:
*    **Ttotal** = Array da transmissão SOLAR da janela por comprimento de onda,
*    **Rtotal** = Array da reflexão SOLAR da janela por por comprimento de onda,
*    **Ttotalvis** = Array da transmissão VISÍVEL da janela por por comprimento de onda,
*    **Rtotalvis** = array da reflexão VISÍVEL da janela  por por comprimento de onda,
*    **Tsol** = Valor de transmissão solar da janela,
*    **Tvis** = Valor de transmissão visível da janela,
*    **Rsol** = Valor de reflexão solar da janela,
*    **Rvis** = Valor de reflexão visível da janela,
*    **A** = Tabela de absorção solar por camada,
*    **Tabelacont** = Tabela de quantas vezes o raio foi computado no layer/comprimento de onda. 

**Função que gera o PROT_results.json**:

`gen_results_3rd_step(list_profileangle_exp)`

É necessário passar uma lista com a key de PROT_theta, limiar (p.ex. '1e-10') e o valor da limiar que vai ser adicionado no nome da key desse dicionário (neste exemplo seria '-10').

Necessita-se também carregar PROT_theta para os cálculos.

# IMPORTAÇÕES
"""

#IPORTAÇÕES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json

"""Importa valores de n e k da literatura para os cálculos"""

# Planilha com valores
data = pd.read_excel (r'/data_nk_optics.xlsx')

#RENOMEAÇÕES
wavelength = pd.DataFrame (data, columns = ['wavelength']).values
Isol = pd.DataFrame (data, columns = ['Isol']).values
Ivis = pd.DataFrame (data, columns = ['Ivis']).values

air_Ciddor = pd.DataFrame (data, columns = ['nx_air_Ciddor','k_air_Ciddor'])
air_Ciddor.rename(columns ={'nx_air_Ciddor':'nx_value','k_air_Ciddor':'k_value'}, inplace = True)

air_default = pd.DataFrame (data, columns = ['nx_air_default','k_air_default']) 
air_default.rename(columns ={'nx_air_default':'nx_value','k_air_default':'k_value'}, inplace = True)

glass_Rubin = pd.DataFrame (data, columns = ['nx_glass_Rubin','k_glass_Rubin'])
glass_Rubin.rename(columns ={'nx_glass_Rubin':'nx_value','k_glass_Rubin':'k_value'}, inplace = True)

water_Segelstein = pd.DataFrame (data, columns = ['nx_water_Segelstein','k_water_Segelstein'])
water_Segelstein.rename(columns ={'nx_water_Segelstein':'nx_value','k_water_Segelstein':'k_value'}, inplace = True) 


glass_measured = pd.DataFrame (data, columns = ['nx_glass_measured','k_glass_measured'])
glass_measured.rename(columns ={'nx_glass_measured':'nx_value','k_glass_measured':'k_value'}, inplace = True)

"""# **CÓDIGO DE EXECUÇÃO**

## PROGRAMAÇÃO PARA INTERPOLAR DADOS DE K e n ENCONTRADOS EM BANCOS DE DADOS
"""

#PROGRAMAÇÃO PARA INTERPOLAR DADOS DE K e n ENCONTRADOS EM BANCOS DE DADOS

data = pd.read_excel (r'/content/Segelstein.xlsx') ### PUXAR O ARQUIVO EXCEL
wl_n = ((pd.DataFrame (data, columns = ['wl_n']))*10**(3)).values.tolist()
n = (pd.DataFrame (data, columns = ['n'])).values.tolist()
wl_k = ((pd.DataFrame (data, columns = ['wl_k']))*10**(3)).values.tolist()
k = (pd.DataFrame (data, columns = ['k'])).values.tolist() 

#Corrige formato
wl_n = np.asarray(wl_n).squeeze()
n = np.asarray(n).squeeze()
wl_k = np.asarray(wl_k).squeeze()
k = np.asarray(k).squeeze()
wwavelength = np.asarray(wavelength).squeeze()

#retirando os nan da dataset
#wl_n = wl_n[~np.isnan(wl_n)]
#n = n[~np.isnan(n)]

#I-N-T-E-R-P-O-L-A-Ç-Ã-O      C-Ú-B-I-C-A

#CRIA FUNÇÃO cúbica
from scipy.interpolate import interp1d
funcao_nx = interp1d(wl_n, n, kind='cubic')
funcao_k = interp1d(wl_k, k, kind='cubic')
#RODA FUNÇÃO
nx_cubic = funcao_nx(wwavelength)
k_cubic = funcao_k(wwavelength)
#ARMAZENA OS DADOS
var = pd.DataFrame(data = [wwavelength, nx_cubic, k_cubic], index='wavelength(nn) nx_value k_value'.split()).T
var.to_excel("Segelstein_corrigido.xlsx") ### MUDAR O NOME DO xlsx

#I-N-T-E-R-P-O-L-A-Ç-Ã-O    L-I-N-E-A-R

nx_data = np.interp(wwavelength, wl_n,n).tolist()  ##array para lista
kx_data = np.interp(wwavelength, wl_k,k).tolist()
#GERA PLANILHA PARA EU COPIAR OS DADOS PARA O EXCEL GERAL
var = pd.DataFrame(data = [wwavelength, nx_data, kx_data], index='wavelength(nn) nx_value k_value'.split()).T
var.to_excel("check_Rubin_clear_tratado.xlsx") #MUDAR O NOME DO xlsx

a = np.array([[1,2],[3,4]])

a.tolist()

np.array(a.tolist())

"""## NÃO GERAR NOVAMENTE!!! 
Cria os dicionários PROT_profile, PROT_theta e PROT_results
"""

'''#PARA ABRIR ARQUIVO JSON ---> PROT_profile
with open ('PROT_profile.json','w') as f:
  json.dump({}, f)

#PARA ABRIR ARQUIVO JSON ---> PROT_theta
with open ('PROT_theta.json','w') as f:
  json.dump({}, f)

#PARA ABRIR ARQUIVO JSON ---> PROT_results
with open ('PROT_results.json','w') as f:
  json.dump({}, f)    '''

"""## Definição de FUNÇÕES"""

#FUNÇÃO PARA GERAR PROT_PROFILE E ARMAZENAR NO JSON
def gen_prot_profile_1st_step(dictionary_of_glazings):
  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_profile.json','r') as f: #abri
    data = json.load(f) #carregei o dicionário_json em data
    f.close()
    for key,v in dictionary_of_glazings.items(): #abri cada item do dicionário criado no python
      info=''
      nx =[]
      k = []
      d=[]
      info = v['info']
      for substrate_data in v['materials']:
        for n_layers in range(substrate_data[2]):
          nx.append(substrate_data[0].nx_value[:]) 
          k.append(substrate_data[0].k_value[:]) 
          d.append(substrate_data[1])
      nx = np.array(nx).T.tolist()
      k = np.array(k).T.tolist()
      data.update({key:[info, nx, k, d]}) #Dicionário com CHAVE E LISTA
    with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_profile.json','w') as f:
      json.dump(data, f, indent= 4) #daí ele apaga o resto
      f.close()

def Calculo_r (nx, k, d, aoi): #VAI SER CHAMADA ABAIXO
  [n,m] = nx.shape #pego o formato --> OK
  theta = np.zeros((n,m)) #crio matriz de teta --> OK
  theta[:,0] = np.radians(aoi) #coloco a coluna de aoi em radianos --> OK

  rf=np.zeros((n,m)) #matriz de reflexo frontal --> OK
  rb=np.zeros((n,m)) #matriz de reflexo traseiro --> OK
  ray_l=np.zeros((n,m)) #distância percorrida de raio, considerando a espessura da seção e o ângulo --> OK
  t=np.ones((n,m)) #matriz de transmissão --> OK

  for n in range(n): #--> OK
    for i in range(m-1): #vai até m-1 para calcular o ar interno --> OK

      theta[n,i+1] = np.arcsin((nx[n,i]/nx[n,i+1])*np.sin(theta[n,i])) #--> OK
      ray_l[n,i+1] = d[i+1]/np.cos(theta[n,i+1]) #não calcular o último comprimento de raio   --> OK
      ray_l[n,(m-1)]=0  #corrige que o comprimento de raio no ar interno é 0 (igual do ar externo)

      rf[n,i+1]= 0.5*(((nx[n,i]*np.cos(theta[n,i]) - nx[n,i+1]*np.cos(theta[n,i+1])) / (nx[n,i]*np.cos(theta[n,i]) + nx[n,i+1]*np.cos(theta[n,i+1])))**2 +
      ((nx[n,i+1]*np.cos(theta[n,i]) - nx[n,i]*np.cos(theta[n,i+1])) / (nx[n,i]*np.cos(theta[n,i+1]) + nx[n,i+1]*np.cos(theta[n,i])))**2
      ) 
      
      rb[n,i]= 0.5*(((nx[n,i+1]*np.cos(theta[n,i+1]) - nx[n,i]*np.cos(theta[n,i])) / (nx[n,i+1]*np.cos(theta[n,i+1]) + nx[n,i]*np.cos(theta[n,i])))**2 +
      ((nx[n,i]*np.cos(theta[n,i+1]) - nx[n,i+1]*np.cos(theta[n,i])) / (nx[n,i+1]*np.cos(theta[n,i]) + nx[n,i]*np.cos(theta[n,i+1])))**2
      )
      
      t[n,i+1] = np.exp((-4*np.pi*k[n,i+1]*ray_l[n,i+1])/(wavelength[n]*10**(-9))) #exp(-4*pi*k*d*lambda^-1)

  return t, rf, rb

#FUNÇÃO PARA PROT_THETA ... VAI CHAMAR FUNÇÃO CALCULO_R ACIMA
def gen_prot_theta_2nd_step(list_profile_and_angle):
  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_profile.json','r') as f: #abri
    data = json.load(f) #carregei o dicionário_json em data
    f.close()
  
  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_theta.json','r') as f: #abri
    data2 = json.load(f) #carregei o dicionário_json em data
    f.close()

  for x in list_profile_and_angle:
    nx=[]
    k=[]
    d=[]
    aoi = x[1]
    for data_key, data_value in data.items():
      if x[0] == data_key: 
        nx = np.array(data_value[1][:])
        k = np.array(data_value[2][:])
        d = data_value[3][:]
        t, rf, rb = Calculo_r (nx, k, d, aoi)
        t=t.tolist()
        rf=rf.tolist()
        rb=rb.tolist()
        name = str(data_key)+'_'+str(aoi)
    data2.update({name:[t, rf, rb]})

  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_theta.json','w') as f:
    json.dump(data2, f, indent= 4) #daí ele apaga o resto
  f.close()

#CALCULO DE A, T, R para SOLAR!!!!

def CalculoATR (t, rf, rb, Ilimit):
  [n,m] = t.shape ##nn=comprimento de onda, m = número de substratos + ar interno e ar interno --> m = substratos+2
  Rtotal = np.zeros(n) #CURVA DE REFLEXÃO com ponderação solar
  Ttotal = np.zeros(n) #CURVA DE Transmissao com ponderação solar
  Tabelacont = np.zeros((n,m)) #conta quantas vezes teve iteração em cada layer, por comprimento de onda
  A = np.zeros((n,m)) #absorção solar para cada layer e cada comprimento de onda


  for n in range(n): #para todos os comprimentos de onda, aqui n é comprimento de onda
    Lista = []     ##lista com a posição de x, xfut e potência do raio (na entrada do material x)
    cont = 0       ##Apontador de execução da lista
    Listacont = 1  ##contador de elementos na lista
    #usando Isol
    Rtotal[n] = Isol[n]*rf[n,1] # utiliza o rf do 1º substrato com posição 1
    Lista.append(tuple((1, 2, Isol[n]*(1-rf[n,1]) )))  #Primeiro raio dentro do sistema

    while cont < Listacont:
      x, xfut, Iin = Lista[cont]

      if x == 0: #Reflexão Externa
        Rtotal[n] = Rtotal[n] +Iin
        Tabelacont[n,x] += 1

      elif x == m-1: #Transmissão para o ambiente interno
        Ttotal[n] = Ttotal[n] +Iin
        Tabelacont[n,x] += 1

      else: #Cálculo do raio em algum substrato
        A[n,x] = A[n,x] + Iin*(1-t[n,x]) 
        Tabelacont[n,x] += 1
        tx = Iin*t[n,x]    

        if ((tx>Ilimit) & (xfut<m) & (xfut>-1)): #Condições de potência e posição para criar raios filhos
          if (xfut-x) == 1:      ##raio indo em direção ao interior
            Ioutwards = tx*rb[n,x]
            Iinwards = tx*(1-rb[n,x])
            Listacont += 1
            Lista.append(tuple((x+1, x+2, Iinwards)))
            if Ioutwards>0:      ##Se não for o caso de dois substratos do mesmo material
              Listacont += 1
              Lista.append(tuple((x, x-1, Ioutwards)))
          elif (xfut-x) == -1:   ##raio indo em direção ao exterior
            Ioutwards = tx*(1-rf[n,x])
            Iinwards = tx*rf[n,x]
            Listacont += 1
            Lista.append(tuple((x-1, x-2, Ioutwards)))
            if Iinwards >0:    ##Se não for o caso de dois substratos do mesmo material
              Listacont += 1
              Lista.append(tuple((x, x+1, Iinwards)))
      cont += 1

  return Ttotal, Rtotal, A, Tabelacont

#CALCULO DE T e R para VISIVEL!!!!

def CalculoTRvis (t, rf, rb, Ilimit):
  [n,m] = t.shape ##nn=comprimento de onda, m = número de substratos + ar interno e ar interno --> m = substratos+2
  Rtotalvis = np.zeros(n) #CURVA DE REFLEXÃO com ponderação do visivel
  Ttotalvis = np.zeros(n) #CURVA DE Transmissao com ponderação visivel
  Avis = np.zeros((n,m)) #absorção visivel para cada layer e cada comprimento de onda


  for n in range(16,97): #para todos os comprimentos de onda, aqui n é comprimento de onda
    Lista = []     ##lista com a posição de x, xfut e potência do raio (na entrada do material x)
    cont = 0       ##Apontador de execução da lista
    Listacont = 1  ##contador de elementos na lista
    #usando Ivis
    Rtotalvis[n] = Ivis[n]*rf[n,1] # utiliza o rf do 1º substrato com posição 1
    Lista.append(tuple((1, 2, Ivis[n]*(1-rf[n,1]) )))  #Primeiro raio dentro do sistema

    while cont < Listacont:
      x, xfut, Iin = Lista[cont]

      if x == 0: #Reflexão Externa
        Rtotalvis[n] = Rtotalvis[n] +Iin

      elif x == m-1: #Transmissão para o ambiente interno
        Ttotalvis[n] = Ttotalvis[n] +Iin

      else: #Cálculo do raio em algum substrato
        Avis[n,x] = Avis[n,x] + Iin*(1-t[n,x]) 
        tx = Iin*t[n,x]    

        if ((tx>Ilimit) & (xfut<m) & (xfut>-1)): #Condições de potência e posição para criar raios filhos
          if (xfut-x) == 1:      ##raio indo em direção ao interior
            Ioutwards = tx*rb[n,x]
            Iinwards = tx*(1-rb[n,x])
            Listacont += 1
            Lista.append(tuple((x+1, x+2, Iinwards)))
            if Ioutwards>0:      ##Se não for o caso de dois substratos do mesmo material
              Listacont += 1
              Lista.append(tuple((x, x-1, Ioutwards)))
          elif (xfut-x) == -1:   ##raio indo em direção ao exterior
            Ioutwards = tx*(1-rf[n,x])
            Iinwards = tx*rf[n,x]
            Listacont += 1
            Lista.append(tuple((x-1, x-2, Ioutwards)))
            if Iinwards >0:    ##Se não for o caso de dois substratos do mesmo material
              Listacont += 1
              Lista.append(tuple((x, x+1, Iinwards)))
      cont += 1

  return Ttotalvis, Rtotalvis

#FUNÇÃO PARA PROT_RESULTS
def gen_results_3rd_step(list_profileangle_exp):
  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_theta.json','r') as f: #abri
    data = json.load(f) #carregei o dicionário_json em data
    f.close()
  
  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_results.json','r') as f: #abri
    data2 = json.load(f) #carregei o dicionário_json em data
    f.close()

    for x in list_profileangle_exp:
      Ilimit = x[1]
      for data_key, data_value in data.items():
        if x[0] == data_key:
          t= np.array(data_value[0][:])
          rf= np.array(data_value[1][:])
          rb= np.array(data_value[2][:])
          Ttotal, Rtotal, A, Tabelacont = CalculoATR (t, rf, rb, Ilimit)
          Ttotalvis, Rtotalvis = CalculoTRvis (t, rf, rb, Ilimit)

          #valores para o espectro
          Ttotal = Ttotal.tolist()
          Rtotal = Rtotal.tolist()
          A = A.tolist()
          Tabelacont = Tabelacont.tolist()
          Ttotalvis = Ttotalvis.tolist()
          Rtotalvis = Rtotalvis.tolist()

          #valores único
          Tsol = np.array(Ttotal).sum()
          Rsol = np.array(Rtotal).sum()
          Tvis = np.array(Ttotalvis[16:97]).sum() #nem precisava do [16:97]
          Rvis = np.array(Rtotalvis[16:97]).sum()         

          name = str(data_key)+'_'+str(x[2])
      data2.update({name:{'Ttotal':Ttotal, 'Rtotal':Rtotal, 'Ttotalvis':Ttotalvis, 'Rtotalvis':Rtotalvis, 'Tsol':Tsol, 'Rsol':Rsol, 'Tvis':Tvis, 'Rvis':Rvis, 'A':A, 'Tabelacont':Tabelacont}})
      print(name)

  with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_results.json','w') as f:
    json.dump(data2, f, indent= 4) #daí ele apaga o resto
  f.close()

"""## Dicionários para gerar o PROT_profile --> level 1"""

#DEFINIÇÃO DOS PROTÓTIPOS
#DICIONARIO QUE VAI SER CRIADO PARA GERAR O JSON 1

dict_level01 = {
#single clear
    'g3':{
        'info': 'single 3mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
    'g4':{
        'info': 'single 4mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},
    'g6':{
        'info': 'single 6mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
 
 #double clear with air
     'g3a2g3':{
        'info': 'double 3mm clear(Rubin)  with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4a2g4':{
        'info': 'double 4mm clear(Rubin)  with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6a2g6':{
        'info': 'double 6mm clear(Rubin)  with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
    
 #triple clear with air
     'g3a2g3a2g3':{
        'info': 'triple 3mm clear(Rubin)  with double 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4a2g4a2g4':{
        'info': 'triple 4mm clear(Rubin)  with double 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6a2g6a2g6':{
        'info': 'triple 6mm clear(Rubin)  with double 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

#quadriple clear with air   
     'g3a2g3a2g3a2g3':{
        'info': 'quadruple 3mm clear(Rubin)  with triple 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4a2g4a2g4a2g4':{
        'info': 'quadruple 4mm clear(Rubin)  with triple 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6a2g6a2g6a2g6':{
        'info': 'quadruple 6mm clear(Rubin)  with triple 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

 #double clear with water
     'g3w2g3':{
        'info': 'double 3mm clear(Rubin)  with 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4w2g4':{
        'info': 'double 4mm clear(Rubin)  with 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6w2g6':{
        'info': 'double 6mm clear(Rubin)  with 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

#triple clear with double water
     'g3w2g3w2g3':{
        'info': 'triple 3mm clear(Rubin)  with double 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4w2g4w2g4':{
        'info': 'triple 4mm clear(Rubin)  with double 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6w2g6w2g6':{
        'info': 'triple 6mm clear(Rubin)  with double 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

#quadriple clear with triple water   
     'g3w2g3w2g3w2g3':{
        'info': 'quadruple 3mm clear(Rubin)  with triple 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4w2g4w2g4w2g4':{
        'info': 'quadruple 4mm clear(Rubin)  with triple 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6w2g6w2g6w2g6':{
        'info': 'quadruple 6mm clear(Rubin)  with triple 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

#DOUBLE 3mm CLEAR WITH WATER FROM 1mm TO 30mm
     'g3w1g3':{
        'info': 'double 3mm clear(Rubin)  with 1mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.001, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g3w2.5g3':{
        'info': 'double 3mm clear(Rubin)  with 2.5mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

      # g3w2g3 JÁ TEM       
     'g3w3g3':{
        'info': 'double 3mm clear(Rubin)  with 3mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.003, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w4g3':{
        'info': 'double 3mm clear(Rubin)  with 4mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.004, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w5g3':{
        'info': 'double 3mm clear(Rubin)  with 5mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w6g3':{
        'info': 'double 3mm clear(Rubin)  with 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w7g3':{
        'info': 'double 3mm clear(Rubin)  with 7mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.007, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w8g3':{
        'info': 'double 3mm clear(Rubin)  with 8mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.008, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w9g3':{
        'info': 'double 3mm clear(Rubin)  with 9mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.009, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w10g3':{
        'info': 'double 3mm clear(Rubin)  with 10mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.010, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w11g3':{
        'info': 'double 3mm clear(Rubin)  with 11mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.011, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w12g3':{
        'info': 'double 3mm clear(Rubin)  with 12mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.012, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w13g3':{
        'info': 'double 3mm clear(Rubin)  with 13mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.013, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w14g3':{
        'info': 'double 3mm clear(Rubin)  with 14mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.014, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w15g3':{
        'info': 'double 3mm clear(Rubin)  with 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w16g3':{
        'info': 'double 3mm clear(Rubin)  with 16mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.016, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w17g3':{
        'info': 'double 3mm clear(Rubin)  with 17mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.017, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w18g3':{
        'info': 'double 3mm clear(Rubin)  with 18mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.018, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w19g3':{
        'info': 'double 3mm clear(Rubin)  with 19mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.019, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w20g3':{
        'info': 'double 3mm clear(Rubin)  with 20mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.020, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w21g3':{
        'info': 'double 3mm clear(Rubin)  with 21mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.021, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w22g3':{
        'info': 'double 3mm clear(Rubin)  with 22mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.022, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w23g3':{
        'info': 'double 3mm clear(Rubin)  with 23mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.023, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w24g3':{
        'info': 'double 3mm clear(Rubin)  with 24mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.024, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w25g3':{
        'info': 'double 3mm clear(Rubin)  with 25mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.025, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w26g3':{
        'info': 'double 3mm clear(Rubin)  with 26mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.026, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w27g3':{
        'info': 'double 3mm clear(Rubin)  with 27mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.027, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w28g3':{
        'info': 'double 3mm clear(Rubin)  with 28mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.028, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},
     'g3w29g3':{
        'info': 'double 3mm clear(Rubin)  with 29mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.029, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w30g3':{
        'info': 'double 3mm clear(Rubin)  with 30mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.030, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},     


#DOUBLE 6mm CLEAR WITH WATER FROM 1mm TO 30mm
     'g6w1g6':{
        'info': 'double 6mm clear(Rubin)  with 1mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.001, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
      # g6w2g6 JÁ TEM       
     'g6w3g6':{
        'info': 'double 6mm clear(Rubin)  with 3mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.003, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w4g6':{
        'info': 'double 6mm clear(Rubin)  with 4mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.004, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w5g6':{
        'info': 'double 6mm clear(Rubin)  with 5mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w6g6':{
        'info': 'double 6mm clear(Rubin)  with 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w7g6':{
        'info': 'double 6mm clear(Rubin)  with 7mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.007, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w8g6':{
        'info': 'double 6mm clear(Rubin)  with 8mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.008, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w9g6':{
        'info': 'double 6mm clear(Rubin)  with 9mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.009, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w10g6':{
        'info': 'double 6mm clear(Rubin)  with 10mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.010, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w11g6':{
        'info': 'double 6mm clear(Rubin)  with 11mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.011, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w12g6':{
        'info': 'double 6mm clear(Rubin)  with 12mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.012, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w13g6':{
        'info': 'double 6mm clear(Rubin)  with 13mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.013, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w14g6':{
        'info': 'double 6mm clear(Rubin)  with 14mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.014, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w15g6':{
        'info': 'double 6mm clear(Rubin)  with 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w16g6':{
        'info': 'double 6mm clear(Rubin)  with 16mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.016, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w17g6':{
        'info': 'double 6mm clear(Rubin)  with 17mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.017, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w18g6':{
        'info': 'double 6mm clear(Rubin)  with 18mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.018, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w19g6':{
        'info': 'double 6mm clear(Rubin)  with 19mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.019, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w20g6':{
        'info': 'double 6mm clear(Rubin)  with 20mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.020, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w21g6':{
        'info': 'double 6mm clear(Rubin)  with 21mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.021, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w22g6':{
        'info': 'double 6mm clear(Rubin)  with 22mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.022, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w23g6':{
        'info': 'double 6mm clear(Rubin)  with 23mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.023, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w24g6':{
        'info': 'double 6mm clear(Rubin)  with 24mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.024, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w25g6':{
        'info': 'double 6mm clear(Rubin)  with 25mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.025, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w26g6':{
        'info': 'double 6mm clear(Rubin)  with 26mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.026, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w27g6':{
        'info': 'double 6mm clear(Rubin)  with 27mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.027, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w28g6':{
        'info': 'double 6mm clear(Rubin)  with 28mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.028, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},
     'g6w29g6':{
        'info': 'double 6mm clear(Rubin)  with 29mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.029, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 
     'g6w30g6':{
        'info': 'double 6mm clear(Rubin)  with 30mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.030, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]}, 

#sum of 12mm of clear and 10mm of water
     'g4w5g4w5g4':{
        'info': 'triple 4mm clear(Rubin)  with double 5mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]}, 
     'g4w9g4w1g4':{
        'info': 'triple 4mm clear(Rubin)  with double water (9mm and 1mm)',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.009, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.001, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},
     'g4w1g4w9g4':{
        'info': 'triple 4mm clear(Rubin)  with double water (1mm and 9mm)',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.001, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.009, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},
     'g3w2.5g3w5g3w2.5g3':{
        'info': 'quadruple 4mm clear(Rubin)  with triple water (2.5, 5 and 2.5mm)',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 

     'g4w10g4a2g4':{
        'info': 'triple 4mm clear(Rubin)  with 10mm water and 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.01, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]}, 
     'g4a2g4w10g4':{
        'info': 'triple 4mm clear(Rubin)  with 2mm air and 10mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.01, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},
     'g3w5g3a2g3w5g3':{
        'info': 'quadruple 4mm clear(Rubin)  with indoor and outdoor 5mm water and central 2mm air gap',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}, 
     'g3w5g3a2g3w2.5g3':{
        'info': 'quadruple 4mm clear(Rubin)  with indoor and outdoor 5mm water and central 2mm air gap',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},  
}

dict_level01_adicionar = {
#triple clear with double water
     'g3w5g3w5g3':{
        'info': 'triple 3mm clear(Rubin)  with double 2mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},  
}

novo_dict_01 = {
    'g3a2g3w10g3a2g3':{
        'info': 'quadruple 3mm clear(Rubin)  with double 2mm air and central 10mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.01, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]}
}

dict_nivel1_vidros={

    'g5':{
        'info': 'single 5mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 1, 1]]},
    'g7':{
        'info': 'single 7mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.007, 1],[air_Ciddor, 1, 1]]},
    'g8':{
        'info': 'single 8mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.008, 1],[air_Ciddor, 1, 1]]},
    'g9':{
        'info': 'single 9mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.009, 1],[air_Ciddor, 1, 1]]},
    'g10':{
        'info': 'single 10mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.01, 1],[air_Ciddor, 1, 1]]},
    'g11':{
        'info': 'single 11mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.011, 1],[air_Ciddor, 1, 1]]},
    'g12':{
        'info': 'single 12mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.012, 1],[air_Ciddor, 1, 1]]},
    'g13':{
        'info': 'single 13mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.013, 1],[air_Ciddor, 1, 1]]},
    'g14':{
        'info': 'single 14mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.014, 1],[air_Ciddor, 1, 1]]},
    'g15':{
        'info': 'single 15mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.015, 1],[air_Ciddor, 1, 1]]},
    'g16':{
        'info': 'single 16mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.016, 1],[air_Ciddor, 1, 1]]},
    'g17':{
        'info': 'single 17mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.017, 1],[air_Ciddor, 1, 1]]},
    'g18':{
        'info': 'single 18mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.018, 1],[air_Ciddor, 1, 1]]},
    'g19':{
        'info': 'single 19mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.019, 1],[air_Ciddor, 1, 1]]},
    'g20':{
        'info': 'single 20mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.02, 1],[air_Ciddor, 1, 1]]},
    'g21':{
        'info': 'single 21mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.021, 1],[air_Ciddor, 1, 1]]},
    'g22':{
        'info': 'single 22mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.022, 1],[air_Ciddor, 1, 1]]},
    'g23':{
        'info': 'single 23mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.023, 1],[air_Ciddor, 1, 1]]},
    'g24':{
        'info': 'single 24mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.024, 1],[air_Ciddor, 1, 1]]},
    'g25':{
        'info': 'single 25mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.025, 1],[air_Ciddor, 1, 1]]},
    'g26':{
        'info': 'single 26mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.026, 1],[air_Ciddor, 1, 1]]},
    'g27':{
        'info': 'single 27mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.027, 1],[air_Ciddor, 1, 1]]},
    'g28':{
        'info': 'single 28mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.028, 1],[air_Ciddor, 1, 1]]},
    'g29':{
        'info': 'single 29mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.029, 1],[air_Ciddor, 1, 1]]},
    'g30':{
        'info': 'single 30mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.03, 1],[air_Ciddor, 1, 1]]},

    'g31':{
        'info': 'single 31mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.031, 1],[air_Ciddor, 1, 1]]},
    'g32':{
        'info': 'single 32mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.032, 1],[air_Ciddor, 1, 1]]},
    'g33':{
        'info': 'single 33mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.033, 1],[air_Ciddor, 1, 1]]},
    'g34':{
        'info': 'single 34mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.034, 1],[air_Ciddor, 1, 1]]},
    'g35':{
        'info': 'single 35mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.035, 1],[air_Ciddor, 1, 1]]},
    'g36':{
        'info': 'single 36mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.036, 1],[air_Ciddor, 1, 1]]},
    'g37':{
        'info': 'single 37mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.037, 1],[air_Ciddor, 1, 1]]},
    'g38':{
        'info': 'single 38mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.038, 1],[air_Ciddor, 1, 1]]},
    'g39':{
        'info': 'single 39mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.039, 1],[air_Ciddor, 1, 1]]},
    'g40':{
        'info': 'single 40mm clear(Rubin) ',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.04, 1],[air_Ciddor, 1, 1]]},
 
}

dict_nivel1_triquad_w6mm = {
    #triple clear with double water
     'g3w6g3w6g3':{
        'info': 'triple 3mm clear(Rubin)  with double 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4w6g4w6g4':{
        'info': 'triple 4mm clear(Rubin)  with double 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6w6g6w6g6':{
        'info': 'triple 6mm clear(Rubin)  with double 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

#quadriple clear with triple water   
     'g3w6g3w6g3w6g3':{
        'info': 'quadruple 3mm clear(Rubin)  with triple 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

     'g4w6g4w6g4w6g4':{
        'info': 'quadruple 4mm clear(Rubin)  with triple 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 1, 1]]},

     'g6w6g6w6g6w6g6':{
        'info': 'quadruple 6mm clear(Rubin)  with triple 6mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.006, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

}

dict_nivel1_air_layer = {
    'g6a2g9':{
        'info': 'Double 6 and 9mm clear(Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.009, 1],[air_Ciddor, 1, 1]]},

    'g5a2g5a2g5':{
        'info': 'Triple 5mm clear(Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 1, 1]]},

    'g4a2g4a2g4a2g3':{
        'info': 'Quadruple (3x 4mm + 3mm) clear(Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g15a2g15':{
        'info': 'Double 15mm clear (Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.015, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.015, 1],[air_Ciddor, 1, 1]]},

    'g10a2g10a2g10':{
        'info': 'Triple 10mm clear(Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.01, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.01, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.01, 1],[air_Ciddor, 1, 1]]},

    'g10a2g5a2g5a2g10':{
        'info': 'Quadruple (10, 5, 5, 10mm) clear(Rubin) with 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.010, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.005, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.010, 1],[air_Ciddor, 1, 1]]},

    'g3a2g6w15g6':{
        'info': 'Triple (3mm + 2x 6mm) clear(Rubin) with 2mm air and 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

    'g3w15g6a2g6':{
        'info': 'Triple (3, 6, 6mm) clear(Rubin) with 15mm wter and 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.006, 1],[air_Ciddor, 1, 1]]},

    'g4a2g4a2g4w15g3':{
        'info': 'Quadruple (4, 4, 4, 3mm) clear(Rubin) with 2x 2mm air and 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g4w15g4a2g4a2g3':{
        'info': 'Quadruple (4, 4, 4, 3mm) clear(Rubin) with 15mm water and 2x 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g4a2g4w15g4a2g3':{
        'info': 'Quadruple (4, 4, 4, 3mm) clear(Rubin) with 2x 2mm air and a central 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.004, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.004, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g3a2g3a2g3a2g3w15g3':{
        'info': 'Quintuple 3mm clear(Rubin) with 4 x 2mm air and a 15mm water',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g3w15g3a2g3a2g3a2g3':{
        'info': 'Quintuple 3mm clear(Rubin) with 15mm water and 4 x 2mm air',
        'materials':[[air_Ciddor, 1, 1],[glass_Rubin, 0.003, 1],[water_Segelstein, 0.015, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_Rubin, 0.003, 1],[air_Ciddor, 1, 1]]},

}

# 28 de AGOSTO DE 2021
dict_nivel1_measured_prototypes = {
    'g3_measured':{
        'info': '3mm clear(glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g3a2g3_measured':{
        'info': 'Double (3, 3mm) clear with 2mm air (glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g3w10g3_measured':{
        'info': 'Double (3, 3mm) clear with 10mm water (glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[water_Segelstein, 0.01, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]},

    'g3w5g3_measured':{
        'info': 'Double (3, 3mm) clear with 5mm water (glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]},  

    'g3w2.5g3_measured':{
        'info': 'Double (3, 3mm) clear with 2.5mm water (glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]}, 

    'g3w5g3a2g3w2.5g3_measured':{
        'info': 'Quadruple (3, 3, 3, 3mm) clear with 5mm water, 2mm air and 2.5mm water (glass measured)',
        'materials':[[air_Ciddor, 1, 1],[glass_measured, 0.003, 1],[water_Segelstein, 0.005, 1],[glass_measured, 0.003, 1],[air_Ciddor, 0.002, 1],[glass_measured, 0.003, 1],[water_Segelstein, 0.0025, 1],[glass_measured, 0.003, 1],[air_Ciddor, 1, 1]]},      
}

"""## Listas para gerar o PROT_theta --> level 2
Precisa carregar o PROT_profile
"""

#VAI LER O DICIONÁRIO 1 PARA GERAR A LISTA 2
#quando o ângulo for 0, pegar um zero só 
list_level02=[]
for k in dict_level01.keys():
  list_level02.append([k,0])

list_level02_adicionar=[]
list_level02_adicionar.append(['g3w5g3w5g3',0])

#Lista dos protótipos com variação angular de 5° até 89.9
prot_var_angular = ['g3', 'g6', 'g3a2g3', 'g3a2g3a2g3', 'g3w2g3', 'g3w10g3', 'g3w5g3w5g3']
'''
for i in prot_var_angular:
  if i in profile.keys():
    print(True)
  else:
    print (False)'''

var_angular = list(range(5, 90, 5))
var_angular.append(89.9)

lista_level02_var_ang = []
for prot in prot_var_angular:
  for aoi in var_angular:
    lista_level02_var_ang.append([prot, aoi])

nova_lista_02 = []
nova_lista_02.append(['g3a2g3w10g3a2g3',0])

lista_nivel2_singles = []
for prot in dict_nivel1_vidros:
  lista_nivel2_singles.append([str(prot), 0])

lista_nivel2_tripquad_w6mm = []
for prot in dict_nivel1_triquad_w6mm:
  lista_nivel2_tripquad_w6mm.append([str(prot), 0])

lista_nivel2_air_layer = []
for prot in dict_nivel1_air_layer:
  lista_nivel2_air_layer.append([str(prot), 0])

# 28 de AGOSTO DE 2021
lista_nivel2_measured_prototypes = []
for prot in dict_nivel1_measured_prototypes:
  lista_nivel2_measured_prototypes.append([str(prot), 0])

"""## Listas para gerar o PROT_results --> level 3
Precisa carregar o PROT_theta
"""

#VAI GERAR A LISTA 3 DEPOIS QUE O JSON 2(THETA) JÁ FOI CRIADO
with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_theta.json','r') as f: #abri
  data_theta = json.load(f) #carregei o dicionário_json em data
f.close()

list_level03 =[]
for k in data_theta.keys():
  list_level03.append([k, 1e-10, -10])

#LISTA PARA GERAR O GRÁFICO DE CONVERGÊNCIA para PROT_results
lista_nivel3_graf_converg = []
prototipos = ['g3_0', 'g3a2g3_0', 'g3w10g3_0', 'g3w5g3_0', 'g3w2.5g3_0','g3w5g3a2g3w2.5g3_0']
'''
é IMPORTANTE checar se esses protótipos existem na lista anterior. Pex:
for i in prototipos:
  if i in theta.keys():
    print(True)
  else:
    print(False)
    '''

precisao_liminar = [-1, -2, -3, -4, -5, -6, -7, -8, -9] #-10 já tem
for prot in prototipos:
  for i in precisao_liminar:
    lista_nivel3_graf_converg.append([prot, float('1e'+str(i)), i])

lista_nivel3_adicionar = []
lista_nivel3_adicionar.append(['g3w5g3w5g3_0',1e-10, -10])

'''lista_nivel3_angulo = []
for prot_ang in lista_level02_var_ang:
  lista_nivel3_angulo.append([str(prot_ang[0] +'_'+str(prot_ang[1])),1e-10, -10])
  '''
#foi até g3_10 OK
#foi até g3_45 ok
#foi até g6_30 ok
#foi até 'g3a2g3_80' OK
#lista_ang_teste = [['g3a2g3a2g3_5', 1e-10, -10], ['g3a2g3a2g3_10', 1e-10, -10], ['g3a2g3a2g3_15', 1e-10, -10]]
#lista_ang_teste = [['g3a2g3a2g3_35', 1e-10, -10], ['g3a2g3a2g3_40', 1e-10, -10], ['g3a2g3a2g3_45', 1e-10, -10], ['g3a2g3a2g3_50', 1e-10, -10]]
#lista_ang_teste = [['g3a2g3a2g3_20', 1e-10, -10], ['g3a2g3a2g3_25', 1e-10, -10], ['g3a2g3a2g3_30', 1e-10, -10]]

#lista_ang_teste = [['g3a2g3a2g3_75', 1e-8, -8]]
#lista_ang_teste = [['g3a2g3_85', 1e-8, -8], ['g3a2g3_89.9', 1e-8, -8]]
#lista_ang_teste =[['g3a2g3a2g3_55', 1e-8, -8], ['g3a2g3a2g3_60', 1e-8, -8], ['g3a2g3a2g3_65', 1e-8, -8], ['g3a2g3a2g3_70', 1e-8, -8]]
#lista_ang_teste = [['g3a2g3a2g3_80', 1e-8, -8], ['g3a2g3a2g3_85', 1e-8, -8], ['g3a2g3a2g3_89.9', 1e-8, -8]]
#lista_ang_teste =[['g3w2g3_5', 1e-8, -8], ['g3w2g3_10', 1e-8, -8], ['g3w2g3_15', 1e-8, -8], ['g3w2g3_20', 1e-8, -8], ['g3w2g3_25', 1e-8, -8],['g3w2g3_30', 1e-8, -8], ['g3w2g3_35', 1e-8, -8]]
#lista_ang_teste = [['g3w2g3_40', 1e-8, -8], ['g3w2g3_45', 1e-8, -8], ['g3w2g3_50', 1e-8, -8], ['g3w2g3_55', 1e-8, -8], ['g3w2g3_60', 1e-8, -8], ['g3w2g3_65', 1e-8, -8]]
#lista_ang_teste = [['g3w2g3_70', 1e-8, -8], ['g3w2g3_75', 1e-8, -8],['g3w2g3_80', 1e-8, -8], ['g3w2g3_85', 1e-8, -8], ['g3w2g3_89.9', 1e-8, -8]]
#lista_ang_teste = [['g3w2g3_80', 1e-8, -8], ['g3w2g3_85', 1e-8, -8], ['g3w2g3_89.9', 1e-8, -8], ['g3w10g3_5', 1e-8, -8], ['g3w10g3_10', 1e-8, -8], ['g3w10g3_15', 1e-8, -8], ['g3w10g3_20', 1e-8, -8], ['g3w10g3_25', 1e-8, -8], ['g3w10g3_30', 1e-8, -8], ['g3w10g3_35', 1e-8, -8]]
#lista_ang_teste = [['g3w10g3_40', 1e-8, -8], ['g3w10g3_45', 1e-8, -8], ['g3w10g3_50', 1e-8, -8], ['g3w10g3_55', 1e-8, -8], ['g3w10g3_60', 1e-8, -8], ['g3w10g3_65', 1e-8, -8], ['g3w10g3_70', 1e-8, -8], ['g3w10g3_75', 1e-8, -8], ['g3w10g3_80', 1e-8, -8], ['g3w10g3_85', 1e-8, -8]]
#lista_ang_teste = [['g3w10g3_89.9', 1e-8, -8], ['g3w5g3w5g3_5', 1e-8, -8], ['g3w5g3w5g3_10', 1e-8, -8], ['g3w5g3w5g3_15', 1e-8, -8], ['g3w5g3w5g3_20', 1e-8, -8], ['g3w5g3w5g3_25', 1e-8, -8], ['g3w5g3w5g3_30', 1e-8, -8], ['g3w5g3w5g3_35', 1e-8, -8], ['g3w5g3w5g3_40', 1e-8, -8]] 
#lista_ang_teste = [['g3w5g3w5g3_45', 1e-8, -8], ['g3w5g3w5g3_50', 1e-8, -8], ['g3w5g3w5g3_55', 1e-8, -8], ['g3w5g3w5g3_60', 1e-8, -8], ['g3w5g3w5g3_65', 1e-8, -8], ['g3w5g3w5g3_70', 1e-8, -8], ['g3w5g3w5g3_75', 1e-8, -8], ['g3w5g3w5g3_80', 1e-8, -8], ['g3w5g3w5g3_85', 1e-8, -8], ['g3w5g3w5g3_89.9', 1e-8, -8]]

# VAI SER NECESSÁRIO CRIAR VÁRIAS SUBLISTAS PARA RODAR A SIMULAÇÃO 
'''
CONTINUAR DESSE PRÓXIMO
'''

nova_lista_03 = []
nova_lista_03.append(['g3a2g3w10g3a2g3_0',1e-10, -10])

lista_nivel3_singles = []
for k in lista_nivel2_singles:
  lista_nivel3_singles.append([str(k[0]+'_0'), 1e-10, -10])

lista_nivel3_tripquad_w6mm = []
for k in lista_nivel2_tripquad_w6mm:
  lista_nivel3_tripquad_w6mm.append([str(k[0]+'_0'), 1e-10, -10])

lista_nivel3_air_layer = []
for k in lista_nivel2_air_layer:
  lista_nivel3_air_layer.append([str(k[0]+'_0'), 1e-10, -10])

lista_nivel3_measured_prototypes = []
for k in lista_nivel2_measured_prototypes:
  lista_nivel3_measured_prototypes.append([str(k[0]+'_0'), 1e-10, -10])

"""## EXECUÇÃO"""

gen_prot_profile_1st_step(dict_nivel1_measured_prototypes)

gen_prot_theta_2nd_step(lista_nivel2_measured_prototypes)

gen_results_3rd_step(lista_nivel3_measured_prototypes)

results["g3w5g3a2g3w2.5g3_measured_0_-10"]["Rsol"]

""" # CARREGAR PROT_results E CHECAR RESULTADOS"""

with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_results.json','r') as f: #abri
  results = json.load(f) #carregei o dicionário_json em data
f.close()

with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_theta.json','r') as f: #abri
  theta = json.load(f) #carregei o dicionário_json em data
f.close()

with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_profile.json','r') as f: #abri
  profile = json.load(f) #carregei o dicionário_json em data
f.close()

# PARA SALVAR NOVAMENTE O DICIONÁRIO SE ALGO FOI FEITO ERRADO

with open('/content/drive/MyDrive/@DOUTORADO/CODES_Doutorado/Otica/PROT_results.json','w') as f:
  json.dump(results, f, indent= 4) #daí ele apaga o resto
f.close()

### Colocar uma variável no lugar de xxxxxxxxxx

float("{:.3f}".format(results['g30_0_-10']['Tsol']))


